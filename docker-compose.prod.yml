services:
  # MongoDB Service
  mongo:
    image: mongo:7.0
    container_name: chat-rooms-mongo-prod
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
      - ./backups:/backups
    environment:
      - MONGO_INITDB_DATABASE=chat-rooms
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    networks:
      - chat-rooms-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend Service (NestJS)
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
      target: production
    container_name: chat-rooms-api-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      mongo:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - MONGO_URI=mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongo:27017/chat-rooms?authSource=admin
      - PORT=3001
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-1d}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - JWT_REFRESH_EXPIRES_IN=${JWT_REFRESH_EXPIRES_IN:-7d}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:8080}
      - RATE_LIMIT_TTL=${RATE_LIMIT_TTL:-60}
      - RATE_LIMIT_LIMIT=${RATE_LIMIT_LIMIT:-100}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    networks:
      - chat-rooms-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    volumes:
      - ./api/logs:/app/logs

  # Frontend Service (Vue 3)
  front:
    build:
      context: ./front
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=${VITE_API_URL:-https://api.yourdomain.com}
        - VITE_SOCKET_URL=${VITE_SOCKET_URL:-https://api.yourdomain.com}
    container_name: chat-rooms-front-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - chat-rooms-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
      - ./front/nginx.prod.conf:/etc/nginx/conf.d/default.conf:ro

  # MongoDB Backup Service
  mongo-backup:
    image: mongo:7.0
    container_name: chat-rooms-backup
    restart: "no"
    depends_on:
      mongo:
        condition: service_healthy
    environment:
      - MONGO_URI=mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongo:27017/chat-rooms?authSource=admin
    networks:
      - chat-rooms-network
    volumes:
      - ./backups:/backups
      - ./scripts:/scripts:ro
    command: /scripts/backup.sh
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  # Log Aggregator (Simple logging solution)
  log-aggregator:
    image: fluent/fluent-bit:latest
    container_name: chat-rooms-logs
    restart: unless-stopped
    volumes:
      - ./api/logs:/var/log/api:ro
      - ./fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
    networks:
      - chat-rooms-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

networks:
  chat-rooms-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mongo-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/mongo

secrets:
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  jwt_refresh_secret:
    file: ./secrets/jwt_refresh_secret.txt
