name: Security & Compliance Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run daily security scans at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Static Application Security Testing (SAST)
  sast-analysis:
    name: Static Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'typescript']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql/codeql-config.yml

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd api && npm ci
          cd ../front && npm ci

      - name: Build applications
        run: |
          cd api && npm run build
          cd ../front && npm run build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # SonarCloud Integration
  sonarcloud-analysis:
    name: SonarCloud Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies and run tests
        run: |
          npm ci
          cd api && npm ci && npm run test:cov
          cd ../front && npm ci && npm run test:coverage

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Dependency Vulnerability Scanning
  dependency-security:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Authenticate Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Install dependencies
        run: |
          npm ci
          cd api && npm ci
          cd ../front && npm ci

      - name: Run Snyk vulnerability scan - API
        run: |
          cd api
          snyk test --severity-threshold=medium --json > ../snyk-api-report.json || true
          snyk monitor --project-name=chat-rooms-api

      - name: Run Snyk vulnerability scan - Frontend
        run: |
          cd front
          snyk test --severity-threshold=medium --json > ../snyk-front-report.json || true
          snyk monitor --project-name=chat-rooms-frontend

      - name: Upload Snyk reports
        uses: actions/upload-artifact@v4
        with:
          name: snyk-security-reports
          path: |
            snyk-api-report.json
            snyk-front-report.json

  # Container Security Scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: [sast-analysis]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./api
          file: ./api/Dockerfile
          tags: chat-rooms-api:latest
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./front
          file: ./front/Dockerfile
          tags: chat-rooms-frontend:latest
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner - API
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'chat-rooms-api:latest'
          format: 'sarif'
          output: 'trivy-api-results.sarif'

      - name: Run Trivy vulnerability scanner - Frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'chat-rooms-frontend:latest'
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-api-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-frontend-results.sarif'

  # Infrastructure as Code Security
  iac-security:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Checkov scan
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,github_actions,secrets
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif

  # Secrets Detection
  secrets-detection:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # License Compliance
  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install license-checker
        run: npm install -g license-checker

      - name: Install dependencies
        run: |
          npm ci
          cd api && npm ci
          cd ../front && npm ci

      - name: Check API licenses
        run: |
          cd api
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC' --json > ../api-licenses.json

      - name: Check Frontend licenses
        run: |
          cd front
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC' --json > ../frontend-licenses.json

      - name: Upload license reports
        uses: actions/upload-artifact@v4
        with:
          name: license-compliance-reports
          path: |
            api-licenses.json
            frontend-licenses.json

  # OWASP Top 10 Compliance Check
  owasp-compliance:
    name: OWASP Top 10 Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd api && npm ci
          cd ../front && npm ci

      - name: Start application for DAST scanning
        run: |
          cd api && npm run start:prod &
          cd front && npm run preview &
          sleep 30

      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:4173'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  # Security Report Generation
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [sast-analysis, sonarcloud-analysis, dependency-security, container-security, iac-security, secrets-detection, license-compliance, owasp-compliance]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "**Date:** $(date)" >> security-summary.md
          echo "**Commit:** ${{ github.sha }}" >> security-summary.md
          echo "" >> security-summary.md
          echo "## Scan Results" >> security-summary.md
          echo "- Static Analysis: ${{ needs.sast-analysis.result }}" >> security-summary.md
          echo "- SonarCloud: ${{ needs.sonarcloud-analysis.result }}" >> security-summary.md
          echo "- Dependencies: ${{ needs.dependency-security.result }}" >> security-summary.md
          echo "- Containers: ${{ needs.container-security.result }}" >> security-summary.md
          echo "- Infrastructure: ${{ needs.iac-security.result }}" >> security-summary.md
          echo "- Secrets: ${{ needs.secrets-detection.result }}" >> security-summary.md
          echo "- Licenses: ${{ needs.license-compliance.result }}" >> security-summary.md
          echo "- OWASP: ${{ needs.owasp-compliance.result }}" >> security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md

      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # Notification
  notification:
    name: Security Scan Notification
    runs-on: ubuntu-latest
    needs: [security-report]
    if: always()
    steps:
      - name: Notify on failure
        if: contains(needs.*.result, 'failure')
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Security Scan Failures Detected',
              body: `Security scan failures detected in commit ${context.sha}.\n\nPlease review the security scan results and address any critical vulnerabilities.`,
              labels: ['security', 'urgent']
            });
