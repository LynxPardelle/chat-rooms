name: 🚀 Core CI Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_ENV: test
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Code Quality & Security Scanning
  quality-gate:
    name: 🔍 Quality Gate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 21.x]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            api/package-lock.json
            front/package-lock.json

      - name: 📦 Install dependencies
        run: |
          npm ci
          npm run setup

      - name: 🧹 ESLint Analysis
        run: |
          npm run lint
          echo "✅ ESLint analysis completed"

      - name: 🎨 Prettier Format Check
        run: |
          npm run format:check
          echo "✅ Code formatting validated"

      - name: 🔨 TypeScript Compilation
        run: |
          npm run build
          echo "✅ TypeScript compilation successful"

      - name: 🛡️ Security Audit
        run: |
          npm audit --audit-level moderate
          cd api && npm audit --audit-level moderate
          cd ../front && npm audit --audit-level moderate
          echo "✅ Security audit completed"

      - name: 📊 Dependency Check
        uses: ossf/scorecard-action@v2.3.1
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: true

  # Job 2: Unit & Integration Testing
  testing:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: quality-gate
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        test-type: [unit, integration]
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: --health-cmd="mongosh --eval 'db.adminCommand(\"ping\")'" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci
          npm run setup

      - name: 🏗️ Build applications
        run: npm run build

      - name: 🧪 Run ${{ matrix.test-type }} tests
        run: |
          if [ "${{ matrix.test-type }}" = "unit" ]; then
            npm run test:unit
          else
            npm run test:integration
          fi
        env:
          MONGO_URI: mongodb://localhost:27017/chat-rooms-test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key-for-ci-only
          JWT_REFRESH_SECRET: test-refresh-secret-key-for-ci-only

      - name: 📊 Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: ${{ matrix.test-type }}
          name: ${{ matrix.test-type }}-coverage-${{ matrix.node-version }}

  # Job 3: Security Scanning
  security-scan:
    name: 🛡️ Security Analysis
    runs-on: ubuntu-latest
    needs: quality-gate
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: 🔐 Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --fail-on=upgradable

      - name: 🔍 GitLeaks Secret Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

  # Job 4: Docker Build & Security Scan
  docker-security:
    name: 🐳 Docker Security
    runs-on: ubuntu-latest
    needs: [testing, security-scan]
    if: github.event_name == 'push'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Build API Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./api
          file: ./api/Dockerfile
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/api-image.tar

      - name: 🏗️ Build Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./front
          file: ./front/Dockerfile
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/front:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/front-image.tar

      - name: 🔍 Scan API image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          input: /tmp/api-image.tar
          format: 'sarif'
          output: 'api-trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: 🔍 Scan Frontend image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          input: /tmp/front-image.tar
          format: 'sarif'
          output: 'front-trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: .

      - name: 🚀 Push images on main branch
        if: github.ref == 'refs/heads/main'
        run: |
          docker load < /tmp/api-image.tar
          docker load < /tmp/front-image.tar
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/front:${{ github.sha }}
          
          # Tag as latest
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:latest
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/front:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/front:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/front:latest

  # Job 5: Performance Testing
  performance:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    needs: testing
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci
          npm run setup

      - name: 🏗️ Build applications
        run: npm run build

      - name: 🚀 Start application
        run: |
          npm run start:prod &
          sleep 30
        env:
          MONGO_URI: mongodb://localhost:27017/chat-rooms-perf
          REDIS_URL: redis://localhost:6379

      - name: ⚡ Run performance tests
        uses: grafana/k6-action@v0.3.1
        with:
          filename: tests/performance/load-test.js
        env:
          K6_PROMETHEUS_RW_SERVER_URL: ${{ secrets.K6_PROMETHEUS_URL }}

      - name: 📊 Performance Report
        run: |
          echo "## 📊 Performance Test Results" >> $GITHUB_STEP_SUMMARY
          echo "Performance tests completed successfully!" >> $GITHUB_STEP_SUMMARY

  # Job 6: Notification & Status
  notification:
    name: 📢 Pipeline Status
    runs-on: ubuntu-latest
    needs: [quality-gate, testing, security-scan, docker-security]
    if: always()

    steps:
      - name: 📊 Pipeline Summary
        run: |
          echo "## 🚀 CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Gate | ${{ needs.quality-gate.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Testing | ${{ needs.testing.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Security | ${{ needs.docker-security.result }} |" >> $GITHUB_STEP_SUMMARY

      - name: 🎉 Success Notification
        if: ${{ needs.quality-gate.result == 'success' && needs.testing.result == 'success' && needs.security-scan.result == 'success' }}
        run: |
          echo "🎉 All quality gates passed successfully!"
          echo "✅ Code quality validated"
          echo "✅ All tests passing"
          echo "✅ Security scans clean"
          echo "✅ Ready for deployment"

      - name: ⚠️ Failure Notification
        if: failure()
        run: |
          echo "❌ Pipeline failed - please check the logs"
          echo "🔍 Review failed jobs and fix issues before merging"
