version: '3.8'

services:
  api:
    image: ${API_IMAGE}
    container_name: chat-rooms-api-staging
    environment:
      - NODE_ENV=staging
      - MONGODB_URI=${MONGODB_URI}
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_URL=${REDIS_URL}
      - PORT=3001
      - CORS_ORIGINS=https://staging.chat-rooms.example.com
      - LOG_LEVEL=debug
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX=100
    ports:
      - "3000:3000"
    depends_on:
      - mongodb
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - staging-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-staging.rule=Host(`api-staging.chat-rooms.example.com`)"
      - "traefik.http.routers.api-staging.tls=true"
      - "traefik.http.routers.api-staging.tls.certresolver=letsencrypt"

  frontend:
    image: ${FRONTEND_IMAGE}
    container_name: chat-rooms-frontend-staging
    environment:
      - VITE_API_URL=https://api-staging.chat-rooms.example.com
      - VITE_WS_URL=wss://api-staging.chat-rooms.example.com
      - VITE_ENVIRONMENT=staging
    ports:
      - "4173:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped
    networks:
      - staging-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend-staging.rule=Host(`staging.chat-rooms.example.com`)"
      - "traefik.http.routers.frontend-staging.tls=true"
      - "traefik.http.routers.frontend-staging.tls.certresolver=letsencrypt"

  mongodb:
    image: mongo:7-jammy
    container_name: chat-rooms-mongodb-staging
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=livechat_staging
    volumes:
      - mongodb_staging_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d:ro
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - staging-network

  redis:
    image: redis:7-alpine
    container_name: chat-rooms-redis-staging
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_staging_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped
    networks:
      - staging-network

  traefik:
    image: traefik:v3.0
    container_name: traefik-staging
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=admin@chat-rooms.example.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "letsencrypt_staging:/letsencrypt"
    restart: unless-stopped
    networks:
      - staging-network

  monitoring:
    image: prom/prometheus:latest
    container_name: prometheus-staging
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus-staging.yml:/etc/prometheus/prometheus.yml
      - prometheus_staging_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - staging-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana-staging
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_staging_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    restart: unless-stopped
    networks:
      - staging-network

volumes:
  mongodb_staging_data:
    driver: local
  redis_staging_data:
    driver: local
  letsencrypt_staging:
    driver: local
  prometheus_staging_data:
    driver: local
  grafana_staging_data:
    driver: local

networks:
  staging-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
