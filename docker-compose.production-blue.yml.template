# Production Blue-Green Environment Template
# Use with: docker-compose -f docker-compose.production-blue.yml.template up -d
version: '3.8'

services:
  # Blue Environment - Current Production
  api-blue:
    image: ${API_IMAGE}:${API_VERSION}
    container_name: chat-rooms-api-blue
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_BLUE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - PORT=3001
      - LOG_LEVEL=info
      - METRICS_ENABLED=true
      - HEALTH_CHECK_INTERVAL=30000
    networks:
      - production-blue
      - shared-db
    depends_on:
      - redis-blue
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  frontend-blue:
    image: ${FRONTEND_IMAGE}:${FRONTEND_VERSION}
    container_name: chat-rooms-frontend-blue
    environment:
      - NODE_ENV=production
      - VITE_API_URL=${API_BLUE_URL}
      - VITE_WS_URL=${WS_BLUE_URL}
    networks:
      - production-blue
    depends_on:
      - api-blue
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  redis-blue:
    image: redis:7-alpine
    container_name: chat-rooms-redis-blue
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis-blue-data:/data
    networks:
      - production-blue
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Load Balancer
  traefik-blue:
    image: traefik:v3.0
    container_name: chat-rooms-traefik-blue
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - "--accesslog=true"
      - "--log.level=INFO"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-blue-certs:/letsencrypt
    networks:
      - production-blue
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(\`${TRAEFIK_BLUE_DOMAIN}\`)"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  # Monitoring
  prometheus-blue:
    image: prom/prometheus:latest
    container_name: chat-rooms-prometheus-blue
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus-blue.yml:/etc/prometheus/prometheus.yml
      - prometheus-blue-data:/prometheus
    networks:
      - production-blue
    ports:
      - "9090:9090"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  grafana-blue:
    image: grafana/grafana:latest
    container_name: chat-rooms-grafana-blue
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-blue-data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana-datasources:/etc/grafana/provisioning/datasources
    networks:
      - production-blue
    ports:
      - "3001:3000"
    depends_on:
      - prometheus-blue

networks:
  production-blue:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  shared-db:
    external: true
  traefik:
    external: true

volumes:
  redis-blue-data:
    driver: local
  traefik-blue-certs:
    driver: local
  prometheus-blue-data:
    driver: local
  grafana-blue-data:
    driver: local
